{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name specviz.spec, :imports nil, :requires {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :cljs.spec/speced-vars [], :uses nil, :defs {registered? {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/spec.cljc", :line 6, :column 7, :end-line 6, :end-column 18, :arglists (quote ([x])), :doc "Returns true if `x` is the keyword of a registered spec?"}, :name specviz.spec/registered?, :variadic false, :file "public/js/out/specviz/spec.cljc", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if `x` is the keyword of a registered spec?"}, depends-on* {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/spec.cljc", :line 11, :column 7, :end-line 11, :end-column 18, :arglists (quote ([names spec-form]))}, :name specviz.spec/depends-on*, :variadic false, :file "public/js/out/specviz/spec.cljc", :end-column 18, :method-params ([names spec-form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([names spec-form]))}, depends-on {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/spec.cljc", :line 21, :column 7, :end-line 21, :end-column 17, :arglists (quote ([spec-name])), :doc "Returns a collection of the qualified-keywords of all specs referenced\n  by the spec-form, transatively."}, :name specviz.spec/depends-on, :variadic false, :file "public/js/out/specviz/spec.cljc", :end-column 17, :method-params ([spec-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-name])), :doc "Returns a collection of the qualified-keywords of all specs referenced\n  by the spec-form, transatively."}, conform-or-throw {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/spec.cljc", :line 29, :column 7, :end-line 29, :end-column 23, :arglists (quote ([spec x]))}, :name specviz.spec/conform-or-throw, :variadic false, :file "public/js/out/specviz/spec.cljc", :end-column 23, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x]))}, literal? {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/spec.cljc", :line 37, :column 7, :end-line 37, :end-column 15, :arglists (quote ([x])), :doc "Returns true if `x` is a spec literal, ex: `(clojure.spec/coll-of int?)`."}, :name specviz.spec/literal?, :variadic false, :file "public/js/out/specviz/spec.cljc", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns true if `x` is a spec literal, ex: `(clojure.spec/coll-of int?)`."}}, :cljs.spec/registry-ref [], :require-macros {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :cljs.analyzer/constants {:seen #{:reason}, :order [:reason]}, :doc "Analyze clojure.spec specs."}