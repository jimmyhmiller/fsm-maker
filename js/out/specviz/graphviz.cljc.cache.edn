{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name specviz.graphviz, :imports nil, :requires {clojure.spec.alpha cljs.spec.alpha, viz viz.core, specviz.spec specviz.spec, viz.core viz.core, specviz.util specviz.util, util specviz.util, s cljs.spec.alpha, string clojure.string, spec specviz.spec, clojure.string clojure.string, cljs.spec.alpha cljs.spec.alpha}, :cljs.spec/speced-vars [], :uses nil, :defs {render-graphviz-node* {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/graphviz.cljc", :line 51, :column 7, :end-line 51, :end-column 28, :arglists (quote ([{:keys [:specviz.graphviz/name :specviz.graphviz/shape :specviz.graphviz/label :specviz.graphviz/style :specviz.graphviz/fillcolor :specviz.graphviz/height :specviz.graphviz/width]}]))}, :name specviz.graphviz/render-graphviz-node*, :variadic false, :file "public/js/out/specviz/graphviz.cljc", :end-column 28, :method-params ([p__55502]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:specviz.graphviz/name :specviz.graphviz/shape :specviz.graphviz/label :specviz.graphviz/style :specviz.graphviz/fillcolor :specviz.graphviz/height :specviz.graphviz/width]}]))}, format {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/graphviz.cljc", :line 44, :column 10, :end-line 44, :end-column 16, :arglists (quote ([format-str & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(format-str args)], :arglists ([format-str & args]), :arglists-meta (nil)}}, :name specviz.graphviz/format, :variadic true, :file "public/js/out/specviz/graphviz.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(format-str args)], :arglists ([format-str & args]), :arglists-meta (nil)}, :method-params [(format-str args)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists ([format-str & args])}, generate-image! {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/graphviz.cljc", :line 148, :column 7, :end-line 148, :end-column 22, :arglists (quote ([dot-string filename])), :doc "Generates two files (1) <filename>.dot containing the dot string, and\n  <filename>.png containing the graphviz rendering as a png file, using the\n  `dot` executable binary."}, :name specviz.graphviz/generate-image!, :variadic false, :file "public/js/out/specviz/graphviz.cljc", :end-column 22, :method-params ([dot-string filename]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dot-string filename])), :doc "Generates two files (1) <filename>.dot containing the dot string, and\n  <filename>.png containing the graphviz rendering as a png file, using the\n  `dot` executable binary."}, next-id {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/graphviz.cljc", :line 98, :column 10, :end-line 98, :end-column 17, :private true, :arglists (quote ([]))}, :private true, :name specviz.graphviz/next-id, :variadic false, :file "public/js/out/specviz/graphviz.cljc", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 98, :end-line 98, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, next-name {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/graphviz.cljc", :line 103, :column 7, :end-line 103, :end-column 16, :arglists (quote ([])), :doc "Returns a unique name for use with a graphviz node."}, :name specviz.graphviz/next-name, :variadic false, :file "public/js/out/specviz/graphviz.cljc", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns a unique name for use with a graphviz node."}, connect {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/graphviz.cljc", :line 124, :column 7, :end-line 124, :end-column 14, :arglists (quote ([& {:keys [from from-port to label]}])), :doc "Make a connection from one node to another node.\n\n  `from` the origin node (map)\n\n  `from-port` (optional) if `from-node` is a table, the id (string) of a port\n              (cell) of the node, from which the connection should originate\n\n  `to` the destination of the connection, can be a node (map), sequence of\n       nodes, or the name of a node (string)\n\n  `label` the connection's label", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [from from-port to label]})], :arglists ([& {:keys [from from-port to label]}]), :arglists-meta (nil)}}, :name specviz.graphviz/connect, :variadic true, :file "public/js/out/specviz/graphviz.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [from from-port to label]})], :arglists ([& {:keys [from from-port to label]}]), :arglists-meta (nil)}, :method-params [({:keys [from from-port to label]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [from from-port to label]}]), :doc "Make a connection from one node to another node.\n\n  `from` the origin node (map)\n\n  `from-port` (optional) if `from-node` is a table, the id (string) of a port\n              (cell) of the node, from which the connection should originate\n\n  `to` the destination of the connection, can be a node (map), sequence of\n       nodes, or the name of a node (string)\n\n  `label` the connection's label"}, dot-string {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/graphviz.cljc", :line 86, :column 7, :end-line 86, :end-column 17, :arglists (quote ([elements])), :doc "Generate the graphviz dot string for a sequence of graphviz element\n  (connection & node) maps."}, :name specviz.graphviz/dot-string, :variadic false, :file "public/js/out/specviz/graphviz.cljc", :end-column 17, :method-params ([elements]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elements])), :doc "Generate the graphviz dot string for a sequence of graphviz element\n  (connection & node) maps."}, clean-name {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/graphviz.cljc", :line 108, :column 7, :end-line 108, :end-column 17, :arglists (quote ([qkw])), :doc "Turn the qualified keyword into a graphviz friendly name"}, :name specviz.graphviz/clean-name, :variadic false, :file "public/js/out/specviz/graphviz.cljc", :end-column 17, :method-params ([qkw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([qkw])), :doc "Turn the qualified keyword into a graphviz friendly name"}, render-graphviz {:name specviz.graphviz/render-graphviz, :file "public/js/out/specviz/graphviz.cljc", :line 39, :column 1, :end-line 39, :end-column 26, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/graphviz.cljc", :line 39, :column 11, :end-line 39, :end-column 26}, :tag cljs.core/MultiFn}, render-graphviz-node {:name specviz.graphviz/render-graphviz-node, :file "public/js/out/specviz/graphviz.cljc", :line 41, :column 1, :end-line 41, :end-column 31, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/graphviz.cljc", :line 41, :column 11, :end-line 41, :end-column 31}, :tag cljs.core/MultiFn}, get-root-name {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/specviz/graphviz.cljc", :line 119, :column 7, :end-line 119, :end-column 20, :arglists (quote ([nodes])), :doc "Gets the name of the tree's root graphviz node."}, :name specviz.graphviz/get-root-name, :variadic false, :file "public/js/out/specviz/graphviz.cljc", :end-column 20, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes])), :doc "Gets the name of the tree's root graphviz node."}}, :cljs.spec/registry-ref [[:specviz.graphviz/line-style #{:solid :dotted}] [:specviz.graphviz/drawable (cljs.spec.alpha/or :connection :specviz.graphviz/connection :node :specviz.graphviz/node)] [:specviz.graphviz/line-direction #{:forward :back :both :none}] [:specviz.graphviz/shape #{"diamond" "folder" "record" "oval" "box" "doublecircle" "square" "plaintext" "circle" "trapezium" "point"}] [:specviz.graphviz/node (cljs.spec.alpha/keys :req [:specviz.graphviz/name] :opt [:specviz.graphviz/label :specviz.graphviz/shape :specviz.graphviz/fillcolor :specviz.graphviz/style :specviz.graphviz/height :specviz.graphviz/width])] [:specviz.graphviz/connection (cljs.spec.alpha/keys :req [:specviz.graphviz/to :specviz.graphviz/from] :opt [:specviz.graphviz/label :specviz.graphviz/line-style :specviz.graphviz/constraint :specviz.graphviz/line-direction])]], :require-macros {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :cljs.analyzer/constants {:seen #{:req-un :opt-un :specviz.graphviz/line-style :gfn :pred-exprs :keys-pred :specviz.graphviz/fillcolor :opt-keys :solid :specviz.graphviz/drawable :specviz.graphviz/height :default :specviz.graphviz/line-direction :specviz.graphviz/width :forward :req-specs cljs.spec.alpha/or :specviz.graphviz/style :specviz.graphviz/shape cljs.core/contains? cljs.core/map? :node % :specviz.graphviz/label cljs.spec.alpha/keys :req :from :label :back :req-keys cljs.core/fn :specviz.graphviz/name :opt-specs :specviz.graphviz/node :specviz.graphviz/connection :pred-forms :both :hierarchy :specviz.graphviz/constraint :specviz.graphviz/to :connection :from-port :dotted :none :specviz.graphviz/from :opt :to}, :order [:specviz.graphviz/shape :specviz.graphviz/connection cljs.spec.alpha/keys :req :specviz.graphviz/to :specviz.graphviz/from :opt :specviz.graphviz/label :specviz.graphviz/line-style :specviz.graphviz/constraint :specviz.graphviz/line-direction :req-un :opt-un :gfn :pred-exprs :keys-pred :opt-keys :req-specs :req-keys :opt-specs :pred-forms cljs.core/fn % cljs.core/map? cljs.core/contains? :specviz.graphviz/node :specviz.graphviz/name :specviz.graphviz/fillcolor :specviz.graphviz/style :specviz.graphviz/height :specviz.graphviz/width :specviz.graphviz/drawable cljs.spec.alpha/or :connection :node :solid :dotted :forward :back :both :none :hierarchy :default :from :from-port :to :label]}, :doc "Tools to work with graphviz data.\n\n  Graphviz data consists of two primary elements, nodes and connections. A\n  graphviz document consists of a sequence of these elements in which order\n  can be important.\n\n  This namespace contains the following:\n\n    - specs for graphviz data\n    - functions to convert graphviz data into a graphviz dot string\n    - a function to render a graphviz dot string into a png image\n  "}