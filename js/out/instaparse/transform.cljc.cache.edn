{:rename-macros {}, :renames {}, :use-macros {throw-illegal-argument-exception instaparse.util}, :excludes #{}, :name instaparse.transform, :imports nil, :requires {instaparse.gll instaparse.gll, instaparse.util instaparse.util}, :cljs.spec/speced-vars [], :uses {throw-illegal-argument-exception instaparse.util}, :defs {map-preserving-meta {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/transform.cljc", :line 6, :column 7, :end-line 6, :end-column 26, :arglists (quote ([f l]))}, :name instaparse.transform/map-preserving-meta, :variadic false, :file "public/js/out/instaparse/transform.cljc", :end-column 26, :method-params ([f l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f l]))}, merge-meta {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/transform.cljc", :line 9, :column 7, :end-line 9, :end-column 17, :arglists (quote ([obj metamap])), :doc "This variation of the merge-meta in gll does nothing if obj is not\nsomething that can have a metamap attached."}, :name instaparse.transform/merge-meta, :variadic false, :file "public/js/out/instaparse/transform.cljc", :end-column 17, :method-params ([obj metamap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj metamap])), :doc "This variation of the merge-meta in gll does nothing if obj is not\nsomething that can have a metamap attached."}, enlive-transform {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/transform.cljc", :line 18, :column 8, :end-line 18, :end-column 24, :private true, :arglists (quote ([transform-map parse-tree]))}, :private true, :name instaparse.transform/enlive-transform, :variadic false, :file "public/js/out/instaparse/transform.cljc", :end-column 24, :method-params ([transform-map parse-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([transform-map parse-tree]))}, hiccup-transform {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/transform.cljc", :line 33, :column 8, :end-line 33, :end-column 24, :private true, :arglists (quote ([transform-map parse-tree]))}, :private true, :name instaparse.transform/hiccup-transform, :variadic false, :file "public/js/out/instaparse/transform.cljc", :end-column 24, :method-params ([transform-map parse-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([transform-map parse-tree]))}, transform {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/transform.cljc", :line 48, :column 7, :end-line 48, :end-column 16, :arglists (quote ([transform-map parse-tree])), :doc "Takes a transform map and a parse tree (or seq of parse-trees).\n   A transform map is a mapping from tags to \n   functions that take a node's contents and return\n   a replacement for the node, i.e.,\n   {:node-tag (fn [child1 child2 ...] node-replacement),\n    :another-node-tag (fn [child1 child2 ...] node-replacement)}"}, :name instaparse.transform/transform, :variadic false, :file "public/js/out/instaparse/transform.cljc", :end-column 16, :method-params ([transform-map parse-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([transform-map parse-tree])), :doc "Takes a transform map and a parse tree (or seq of parse-trees).\n   A transform map is a mapping from tags to \n   functions that take a node's contents and return\n   a replacement for the node, i.e.,\n   {:node-tag (fn [child1 child2 ...] node-replacement),\n    :another-node-tag (fn [child1 child2 ...] node-replacement)}"}}, :cljs.spec/registry-ref [], :require-macros {instaparse.gll instaparse.gll}, :cljs.analyzer/constants {:seen #{:else :content :tag}, :order [:tag :content :else]}, :doc "Functions to transform parse trees"}