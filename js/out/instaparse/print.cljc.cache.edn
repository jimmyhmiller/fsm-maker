{:rename-macros {}, :renames {}, :externs {Error {}, goog {string {StringBuffer {prototype {append {}}}}}}, :use-macros {}, :excludes #{}, :name instaparse.print, :imports nil, :requires {str clojure.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses nil, :defs {combinators->str {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/print.cljc", :line 53, :column 7, :end-line 53, :end-column 23, :arglists (quote ([p] [{:keys [parser parser1 parser2 parsers tag], :as p} hidden?])), :doc "Stringifies a parser built from combinators", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [{:keys [parser parser1 parser2 parsers tag], :as p} hidden?]), :arglists ([p] [{:keys [parser parser1 parser2 parsers tag], :as p} hidden?]), :arglists-meta (nil nil)}}, :name instaparse.print/combinators->str, :variadic false, :file "public/js/out/instaparse/print.cljc", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [{:keys [parser parser1 parser2 parsers tag], :as p} hidden?]), :arglists ([p] [{:keys [parser parser1 parser2 parsers tag], :as p} hidden?]), :arglists-meta (nil nil)}, :method-params ([p] [{:keys [parser parser1 parser2 parsers tag], :as p} hidden?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists ([p] [{:keys [parser parser1 parser2 parsers tag], :as p} hidden?]), :doc "Stringifies a parser built from combinators"}, paren-for-tags {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/print.cljc", :line 8, :column 7, :end-line 8, :end-column 21, :arglists (quote ([tag-set hidden? parser]))}, :name instaparse.print/paren-for-tags, :variadic false, :file "public/js/out/instaparse/print.cljc", :end-column 21, :method-params ([tag-set hidden? parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tag-set hidden? parser]))}, paren-for-compound {:name instaparse.print/paren-for-compound, :file "public/js/out/instaparse/print.cljc", :line 13, :column 1, :end-line 13, :end-column 24, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/print.cljc", :line 13, :column 6, :end-line 13, :end-column 24}, :tag any}, regexp-replace {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/print.cljc", :line 16, :column 7, :end-line 16, :end-column 21, :arglists (quote ([s])), :doc "Replaces whitespace characters with escape sequences for better printing"}, :name instaparse.print/regexp-replace, :variadic false, :file "public/js/out/instaparse/print.cljc", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Replaces whitespace characters with escape sequences for better printing"}, regexp->str {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/print.cljc", :line 27, :column 7, :end-line 27, :end-column 18, :arglists (quote ([r]))}, :name instaparse.print/regexp->str, :variadic false, :file "public/js/out/instaparse/print.cljc", :end-column 18, :method-params ([r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([r]))}, number->hex-padded {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/print.cljc", :line 43, :column 12, :end-line 43, :end-column 30, :arglists (quote ([n]))}, :name instaparse.print/number->hex-padded, :variadic false, :file "public/js/out/instaparse/print.cljc", :end-column 30, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 6, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, char-range->str {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/print.cljc", :line 48, :column 12, :end-line 48, :end-column 27, :arglists (quote ([{:keys [lo hi]}]))}, :name instaparse.print/char-range->str, :variadic false, :file "public/js/out/instaparse/print.cljc", :end-column 27, :method-params ([p__55993]), :protocol-impl nil, :arglists-meta (nil nil), :column 6, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [lo hi]}]))}, rule->str {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/print.cljc", :line 82, :column 7, :end-line 82, :end-column 16, :arglists (quote ([non-terminal parser])), :doc "Takes a non-terminal symbol and a parser built from combinators,\n   and returns a string for the rule."}, :name instaparse.print/rule->str, :variadic false, :file "public/js/out/instaparse/print.cljc", :end-column 16, :method-params ([non-terminal parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([non-terminal parser])), :doc "Takes a non-terminal symbol and a parser built from combinators,\n   and returns a string for the rule."}, Parser->str {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/instaparse/print.cljc", :line 94, :column 7, :end-line 94, :end-column 18, :arglists (quote ([{grammar :grammar, start :start-production}])), :doc "Takes a Parser object, i.e., something with a grammar map and a start \n   production keyword, and stringifies it."}, :name instaparse.print/Parser->str, :variadic false, :file "public/js/out/instaparse/print.cljc", :end-column 18, :method-params ([p__56012]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{grammar :grammar, start :start-production}])), :doc "Takes a Parser object, i.e., something with a grammar map and a start \n   production keyword, and stringifies it."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:parser2 :cat :min :ord :alt :raw :start-production :grammar :string :lo :hide :parser :regexp :parser1 :keyword :max :red :reduction-type :tag :parsers :hi}, :order [:tag :cat :ord :alt :lo :hi :parser :parser1 :parser2 :parsers :hide :min :max :string :regexp :keyword :reduction-type :red :raw :grammar :start-production]}, :doc "Facilities for taking parsers and grammars, and converting them to strings.\n   Used for pretty-printing."}