{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name devtools.toolbox, :imports nil, :requires {devtools.protocols devtools.protocols, devtools.formatters.templating devtools.formatters.templating, devtools.formatters.markup devtools.formatters.markup}, :cljs.spec/speced-vars [], :uses {<preview> devtools.formatters.markup, <standard-body-reference> devtools.formatters.markup, render-markup devtools.formatters.templating, <surrogate> devtools.formatters.markup, IFormat devtools.protocols, <body> devtools.formatters.markup}, :defs {envelope {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/devtools/toolbox.cljs", :line 6, :column 7, :end-line 6, :end-column 15, :arglists (quote ([obj] [obj header] [obj header style] [obj header style tag])), :doc "This is a simple wrapper for logging \"busy\" objects.\n  This is especially handy when you happen to be logging javascript objects with many properties.\n  Standard javascript console renderer tends to print a lot of infomation in the header in some cases and that can make\n  console output pretty busy. By using envelope you can force your own short header and let the details expand on demand\n  via disclosure triangle. The header can be styled and you can optionally specify preferred wrapping tag (advanced).", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([obj] [obj header] [obj header style] [obj header style tag]), :arglists ([obj] [obj header] [obj header style] [obj header style tag]), :arglists-meta (nil nil nil nil)}}, :name devtools.toolbox/envelope, :variadic false, :file "public/js/out/devtools/toolbox.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([obj] [obj header] [obj header style] [obj header style tag]), :arglists ([obj] [obj header] [obj header style] [obj header style tag]), :arglists-meta (nil nil nil nil)}, :method-params ([obj] [obj header] [obj header style] [obj header style tag]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 4, :fn-var true, :arglists ([obj] [obj header] [obj header style] [obj header style tag]), :doc "This is a simple wrapper for logging \"busy\" objects.\n  This is especially handy when you happen to be logging javascript objects with many properties.\n  Standard javascript console renderer tends to print a lot of infomation in the header in some cases and that can make\n  console output pretty busy. By using envelope you can force your own short header and let the details expand on demand\n  via disclosure triangle. The header can be styled and you can optionally specify preferred wrapping tag (advanced)."}, t_devtools$toolbox54667 {:num-fields 5, :protocols #{devtools.protocols/IFormat cljs.core/IMeta cljs.core/IWithMeta}, :name devtools.toolbox/t_devtools$toolbox54667, :file "public/js/out/devtools/toolbox.cljs", :type true, :anonymous true, :column 4, :line 19, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_devtools$toolbox54667 {:protocol-inline nil, :meta {:anonymous true, :protocols #{devtools.protocols/IFormat cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([obj header style tag meta54668])), :file nil}, :protocols #{devtools.protocols/IFormat cljs.core/IMeta cljs.core/IWithMeta}, :name devtools.toolbox/->t_devtools$toolbox54667, :variadic false, :file "public/js/out/devtools/toolbox.cljs", :method-params ([obj header style tag meta54668]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 4, :factory :positional, :line 19, :max-fixed-arity 5, :fn-var true, :arglists (quote ([obj header style tag meta54668])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, force-format {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/fsm-maker/public/js/out/devtools/toolbox.cljs", :line 25, :column 7, :end-line 25, :end-column 19, :arglists (quote ([obj])), :doc "Forces object to be rendered by cljs-devtools during console logging.\n\n  Unfortunately custom formatters subsystem in DevTools is not applied to primitive values like numbers, strings, null, etc.\n  This wrapper can be used as a workaround if you really need to force cljs-devtools rendering:\n\n    (.log js/console nil) ; will render 'null'\n    (.log js/console (force-format nil)) ; will render 'nil' and not 'null'\n\n  See https://github.com/binaryage/cljs-devtools/issues/17\n  "}, :name devtools.toolbox/force-format, :variadic false, :file "public/js/out/devtools/toolbox.cljs", :end-column 19, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :doc "Forces object to be rendered by cljs-devtools during console logging.\n\n  Unfortunately custom formatters subsystem in DevTools is not applied to primitive values like numbers, strings, null, etc.\n  This wrapper can be used as a workaround if you really need to force cljs-devtools rendering:\n\n    (.log js/console nil) ; will render 'null'\n    (.log js/console (force-format nil)) ; will render 'nil' and not 'null'\n\n  See https://github.com/binaryage/cljs-devtools/issues/17\n  "}}, :cljs.spec/registry-ref [], :require-macros {devtools.formatters.markup devtools.formatters.markup}, :cljs.analyzer/constants {:seen #{tag obj meta54668 :default-envelope-style :default-envelope-header header style :span}, :order [:default-envelope-header :default-envelope-style :span obj header style tag meta54668]}, :doc nil}